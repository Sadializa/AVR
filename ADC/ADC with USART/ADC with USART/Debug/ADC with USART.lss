
ADC with USART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000284  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000002f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a17  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b0  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003f1  00000000  00000000  0000158f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00001980  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043e  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000172  00000000  00000000  00001e96  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_18>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  88:	0c 94 40 01 	jmp	0x280	; 0x280 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_18>:
volatile uint8_t adcLData = 0;
#pragma endregion

#pragma region Function
ISR(USART_RX_vect)
{
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	8f 93       	push	r24
	value = UDR0;
  9c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <value>
	newData = 1;
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <newData>
}
  aa:	8f 91       	pop	r24
  ac:	0f 90       	pop	r0
  ae:	0f be       	out	0x3f, r0	; 63
  b0:	0f 90       	pop	r0
  b2:	1f 90       	pop	r1
  b4:	18 95       	reti

000000b6 <USART_Init>:
void USART_Init(void)
{
	// Set baud rate
	UBRR0L = BAUD_PRESCALE;//lower 8-bits into the the UBRRL register
  b6:	87 e6       	ldi	r24, 0x67	; 103
  b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UBRR0H = (BAUD_PRESCALE >> 8); //upper 8-bits into the UBRRH register
  bc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UCSR0B = ((1<<TXEN0)|(1<<RXEN0) | (1<<RXCIE0));//enable tx and Rx. Receive interrupt
  c0:	88 e9       	ldi	r24, 0x98	; 152
  c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c6:	08 95       	ret

000000c8 <USART_SendByte>:
	/* Default frame format is 8 data bits, no parity, 1 stop bit to change use UCSRC, see AVR datasheet*/
}
void USART_SendByte(uint8_t data){

	// Wait until last byte has been transmitted
	while((UCSR0A &(1<<UDRE0)) == 0);
  c8:	e0 ec       	ldi	r30, 0xC0	; 192
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	90 81       	ld	r25, Z
  ce:	95 ff       	sbrs	r25, 5
  d0:	fd cf       	rjmp	.-6      	; 0xcc <USART_SendByte+0x4>

	// Transmit data
	UDR0 = data;
  d2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  d6:	08 95       	ret

000000d8 <USART_Sends>:
}
void USART_Sends (const char *s)
{
  d8:	0f 93       	push	r16
  da:	1f 93       	push	r17
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	ec 01       	movw	r28, r24
  e2:	8e 01       	movw	r16, r28
	do
	{
		USART_SendByte (*s);  //send one char of string
  e4:	89 91       	ld	r24, Y+
  e6:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	}
	while (*s++);   //next char of string until end of string sign
  ea:	f8 01       	movw	r30, r16
  ec:	80 81       	ld	r24, Z
  ee:	81 11       	cpse	r24, r1
  f0:	f8 cf       	rjmp	.-16     	; 0xe2 <USART_Sends+0xa>
}
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	08 95       	ret

000000fc <USART_Sendi>:
void USART_Sendi(const uint16_t var) {
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	27 97       	sbiw	r28, 0x07	; 7
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
	char cache[7];
	USART_Sends (utoa(var, cache, 10));
 110:	4a e0       	ldi	r20, 0x0A	; 10
 112:	50 e0       	ldi	r21, 0x00	; 0
 114:	be 01       	movw	r22, r28
 116:	6f 5f       	subi	r22, 0xFF	; 255
 118:	7f 4f       	sbci	r23, 0xFF	; 255
 11a:	0e 94 0b 01 	call	0x216	; 0x216 <utoa>
 11e:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Sends>
}
 122:	27 96       	adiw	r28, 0x07	; 7
 124:	0f b6       	in	r0, 0x3f	; 63
 126:	f8 94       	cli
 128:	de bf       	out	0x3e, r29	; 62
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	cd bf       	out	0x3d, r28	; 61
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <InitADC>:
void InitADC()
{
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0);
 134:	ec e7       	ldi	r30, 0x7C	; 124
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	80 83       	st	Z, r24
	//set prescaller to 128 and enable ADC
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0)|(1<<ADEN);
 13e:	ea e7       	ldi	r30, 0x7A	; 122
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	87 68       	ori	r24, 0x87	; 135
 146:	80 83       	st	Z, r24
 148:	08 95       	ret

0000014a <ReadADC>:
}
uint16_t ReadADC(uint8_t ADCchannel)
{
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 14a:	ec e7       	ldi	r30, 0x7C	; 124
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	90 81       	ld	r25, Z
 150:	8f 70       	andi	r24, 0x0F	; 15
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	89 2b       	or	r24, r25
 156:	80 83       	st	Z, r24
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 158:	ea e7       	ldi	r30, 0x7A	; 122
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 64       	ori	r24, 0x40	; 64
 160:	80 83       	st	Z, r24
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 162:	80 81       	ld	r24, Z
 164:	86 fd       	sbrc	r24, 6
 166:	fd cf       	rjmp	.-6      	; 0x162 <ReadADC+0x18>
	adcHData = ADCH;
 168:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 16c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <adcHData>
	adcLData = ADCL;
 170:	e8 e7       	ldi	r30, 0x78	; 120
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	return ADC;
 17a:	80 81       	ld	r24, Z
 17c:	91 81       	ldd	r25, Z+1	; 0x01
}
 17e:	08 95       	ret

00000180 <LEDInit>:
void LEDInit(void){
DDRB = 0xFF;//B5 Output
 180:	8f ef       	ldi	r24, 0xFF	; 255
 182:	84 b9       	out	0x04, r24	; 4
PORTB = 0x00;//All off
 184:	15 b8       	out	0x05, r1	; 5
 186:	08 95       	ret

00000188 <main>:
}
#pragma endregion

int main(void)
{
	LEDInit();//Init LED
 188:	0e 94 c0 00 	call	0x180	; 0x180 <LEDInit>
	//initialize ADC
	InitADC();
 18c:	0e 94 9a 00 	call	0x134	; 0x134 <InitADC>
	uint16_t adc_value; // Variable to hold ADC result
	USART_Init();
 190:	0e 94 5b 00 	call	0xb6	; 0xb6 <USART_Init>
	sei();
 194:	78 94       	sei
	#pragma region USART Send "IOT-Army"
	USART_SendByte(0x49);
 196:	89 e4       	ldi	r24, 0x49	; 73
 198:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	USART_SendByte('O');
 19c:	8f e4       	ldi	r24, 0x4F	; 79
 19e:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	USART_SendByte(0b01010100);
 1a2:	84 e5       	ldi	r24, 0x54	; 84
 1a4:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	USART_SendByte(45);
 1a8:	8d e2       	ldi	r24, 0x2D	; 45
 1aa:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	USART_SendByte(0x41);
 1ae:	81 e4       	ldi	r24, 0x41	; 65
 1b0:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	USART_SendByte('R');
 1b4:	82 e5       	ldi	r24, 0x52	; 82
 1b6:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	USART_SendByte(0x4D);
 1ba:	8d e4       	ldi	r24, 0x4D	; 77
 1bc:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	USART_SendByte(0b01011001);
 1c0:	89 e5       	ldi	r24, 0x59	; 89
 1c2:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
	while (1)
	{
		adc_value = ReadADC(0);
		//uint8_t adcH = adc_value >> 8;
		//uint8_t adcL = adc_value & 0x0F;
		if(ADCW < 512)
 1c6:	c8 e7       	ldi	r28, 0x78	; 120
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
	USART_SendByte(0x4D);
	USART_SendByte(0b01011001);
	#pragma endregion
	while (1)
	{
		adc_value = ReadADC(0);
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 a5 00 	call	0x14a	; 0x14a <ReadADC>
 1d0:	8c 01       	movw	r16, r24
		//uint8_t adcH = adc_value >> 8;
		//uint8_t adcL = adc_value & 0x0F;
		if(ADCW < 512)
 1d2:	88 81       	ld	r24, Y
 1d4:	99 81       	ldd	r25, Y+1	; 0x01
 1d6:	81 15       	cp	r24, r1
 1d8:	92 40       	sbci	r25, 0x02	; 2
 1da:	18 f4       	brcc	.+6      	; 0x1e2 <main+0x5a>
		{
			PORTB |= (1 << 3); // Turn on LED1
 1dc:	2b 9a       	sbi	0x05, 3	; 5
			PORTB &= ~(1 << 4); // Turn off LED2
 1de:	2c 98       	cbi	0x05, 4	; 5
 1e0:	07 c0       	rjmp	.+14     	; 0x1f0 <main+0x68>
		}
		
		else if (ADCW>512)
 1e2:	88 81       	ld	r24, Y
 1e4:	99 81       	ldd	r25, Y+1	; 0x01
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	92 40       	sbci	r25, 0x02	; 2
 1ea:	10 f0       	brcs	.+4      	; 0x1f0 <main+0x68>
		{
			PORTB &= ~(1 << 3); // Turn off LED1
 1ec:	2b 98       	cbi	0x05, 3	; 5
			PORTB |= (1 << 4); // Turn on LED2
 1ee:	2c 9a       	sbi	0x05, 4	; 5
		}
		//USART_SendByte(ADCL);
		#pragma region Send Adc Data through USART
		USART_SendByte(0x0D);
 1f0:	8d e0       	ldi	r24, 0x0D	; 13
 1f2:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
		USART_SendByte(0x0A);
 1f6:	8a e0       	ldi	r24, 0x0A	; 10
 1f8:	0e 94 64 00 	call	0xc8	; 0xc8 <USART_SendByte>
		USART_Sendi(adc_value);
 1fc:	c8 01       	movw	r24, r16
 1fe:	0e 94 7e 00 	call	0xfc	; 0xfc <USART_Sendi>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	8f ef       	ldi	r24, 0xFF	; 255
 204:	93 ec       	ldi	r25, 0xC3	; 195
 206:	29 e0       	ldi	r18, 0x09	; 9
 208:	81 50       	subi	r24, 0x01	; 1
 20a:	90 40       	sbci	r25, 0x00	; 0
 20c:	20 40       	sbci	r18, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x80>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x8a>
 212:	00 00       	nop
 214:	da cf       	rjmp	.-76     	; 0x1ca <main+0x42>

00000216 <utoa>:
 216:	45 32       	cpi	r20, 0x25	; 37
 218:	51 05       	cpc	r21, r1
 21a:	20 f4       	brcc	.+8      	; 0x224 <utoa+0xe>
 21c:	42 30       	cpi	r20, 0x02	; 2
 21e:	10 f0       	brcs	.+4      	; 0x224 <utoa+0xe>
 220:	0c 94 16 01 	jmp	0x22c	; 0x22c <__utoa_ncheck>
 224:	fb 01       	movw	r30, r22
 226:	10 82       	st	Z, r1
 228:	cb 01       	movw	r24, r22
 22a:	08 95       	ret

0000022c <__utoa_ncheck>:
 22c:	bb 27       	eor	r27, r27

0000022e <__utoa_common>:
 22e:	fb 01       	movw	r30, r22
 230:	55 27       	eor	r21, r21
 232:	aa 27       	eor	r26, r26
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	aa 1f       	adc	r26, r26
 23a:	a4 17       	cp	r26, r20
 23c:	10 f0       	brcs	.+4      	; 0x242 <__utoa_common+0x14>
 23e:	a4 1b       	sub	r26, r20
 240:	83 95       	inc	r24
 242:	50 51       	subi	r21, 0x10	; 16
 244:	b9 f7       	brne	.-18     	; 0x234 <__utoa_common+0x6>
 246:	a0 5d       	subi	r26, 0xD0	; 208
 248:	aa 33       	cpi	r26, 0x3A	; 58
 24a:	08 f0       	brcs	.+2      	; 0x24e <__utoa_common+0x20>
 24c:	a9 5d       	subi	r26, 0xD9	; 217
 24e:	a1 93       	st	Z+, r26
 250:	00 97       	sbiw	r24, 0x00	; 0
 252:	79 f7       	brne	.-34     	; 0x232 <__utoa_common+0x4>
 254:	b1 11       	cpse	r27, r1
 256:	b1 93       	st	Z+, r27
 258:	11 92       	st	Z+, r1
 25a:	cb 01       	movw	r24, r22
 25c:	0c 94 30 01 	jmp	0x260	; 0x260 <strrev>

00000260 <strrev>:
 260:	dc 01       	movw	r26, r24
 262:	fc 01       	movw	r30, r24
 264:	67 2f       	mov	r22, r23
 266:	71 91       	ld	r23, Z+
 268:	77 23       	and	r23, r23
 26a:	e1 f7       	brne	.-8      	; 0x264 <strrev+0x4>
 26c:	32 97       	sbiw	r30, 0x02	; 2
 26e:	04 c0       	rjmp	.+8      	; 0x278 <strrev+0x18>
 270:	7c 91       	ld	r23, X
 272:	6d 93       	st	X+, r22
 274:	70 83       	st	Z, r23
 276:	62 91       	ld	r22, -Z
 278:	ae 17       	cp	r26, r30
 27a:	bf 07       	cpc	r27, r31
 27c:	c8 f3       	brcs	.-14     	; 0x270 <strrev+0x10>
 27e:	08 95       	ret

00000280 <_exit>:
 280:	f8 94       	cli

00000282 <__stop_program>:
 282:	ff cf       	rjmp	.-2      	; 0x282 <__stop_program>
